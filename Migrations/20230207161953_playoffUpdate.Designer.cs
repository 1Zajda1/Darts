// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sdc.Data;

#nullable disable

namespace Sdc.Migrations
{
    [DbContext(typeof(SdcContext))]
    [Migration("20230207161953_playoffUpdate")]
    partial class playoffUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sdc.Data.MAT_Leg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Player1Score")
                        .HasColumnType("int");

                    b.Property<int>("Player2Score")
                        .HasColumnType("int");

                    b.Property<int?>("SetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("MAT_Legs");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeDone")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePlaned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimePlayed")
                        .HasColumnType("datetime2");

                    b.Property<int>("FullScore")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLegs")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<int?>("Player1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Player1Score")
                        .HasColumnType("int");

                    b.Property<int?>("Player2Id")
                        .HasColumnType("int");

                    b.Property<int?>("Player2Score")
                        .HasColumnType("int");

                    b.Property<int?>("PositionInPlayoff")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("MAT_Matchs");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LegId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RoundCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MAT_Rounds");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Player1Score")
                        .HasColumnType("int");

                    b.Property<int>("Player2Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MAT_Sets");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Shot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsClosingDart")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDouble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForClosing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOvershot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTriple")
                        .HasColumnType("bit");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MAT_Shots");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Shot_x_Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoundId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ShotCount")
                        .HasColumnType("int");

                    b.Property<int?>("ShotId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("ShotId");

                    b.ToTable("MAT_Shot_x_Round");
                });

            modelBuilder.Entity("Sdc.Data.PLA_EloHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeChanged")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RankNew")
                        .HasColumnType("int");

                    b.Property<int>("RankOld")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PLA_EloHistories");
                });

            modelBuilder.Entity("Sdc.Data.PLA_Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PLA_Players");
                });

            modelBuilder.Entity("Sdc.Data.TUR_Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FullScore")
                        .HasColumnType("int");

                    b.Property<bool>("HasPlayoff")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfGroups")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfLegs")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<int>("PlayerIsPlayoff")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TUR_Tournaments");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Leg", b =>
                {
                    b.HasOne("Sdc.Data.MAT_Set", "MAT_Set")
                        .WithMany("Legs")
                        .HasForeignKey("SetId");

                    b.Navigation("MAT_Set");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Match", b =>
                {
                    b.HasOne("Sdc.Data.PLA_Player", "Player1")
                        .WithMany("Player1Matches")
                        .HasForeignKey("Player1Id");

                    b.HasOne("Sdc.Data.PLA_Player", "Player2")
                        .WithMany("Player2Matches")
                        .HasForeignKey("Player2Id");

                    b.HasOne("Sdc.Data.TUR_Tournament", "Tournament")
                        .WithMany("MAT_Matches")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Round", b =>
                {
                    b.HasOne("Sdc.Data.MAT_Leg", "Leg")
                        .WithMany("Rounds")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sdc.Data.PLA_Player", "Player")
                        .WithMany("MAT_Round")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Set", b =>
                {
                    b.HasOne("Sdc.Data.MAT_Match", "Match")
                        .WithMany("MAT_Sets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Shot_x_Round", b =>
                {
                    b.HasOne("Sdc.Data.MAT_Round", "Round")
                        .WithMany("Shots")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sdc.Data.MAT_Shot", "Shot")
                        .WithMany("Rounds")
                        .HasForeignKey("ShotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("Shot");
                });

            modelBuilder.Entity("Sdc.Data.PLA_EloHistory", b =>
                {
                    b.HasOne("Sdc.Data.PLA_Player", "Player")
                        .WithMany("PLA_EloHistories")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Leg", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Match", b =>
                {
                    b.Navigation("MAT_Sets");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Round", b =>
                {
                    b.Navigation("Shots");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Set", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("Sdc.Data.MAT_Shot", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Sdc.Data.PLA_Player", b =>
                {
                    b.Navigation("MAT_Round");

                    b.Navigation("PLA_EloHistories");

                    b.Navigation("Player1Matches");

                    b.Navigation("Player2Matches");
                });

            modelBuilder.Entity("Sdc.Data.TUR_Tournament", b =>
                {
                    b.Navigation("MAT_Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
